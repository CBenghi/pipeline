if (WIN32)
  # Configure nvpmapi directory
  if(MSVC)
    set (COMPILER "win-${DP_ARCH}")
  elseif(CMAKE_COMPILER_IS_GNUCC)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    string(STRIP "${GCC_VERSION}" GCC_VERSION)
    set (COMPILER "mingw-gcc-${GCC_VERSION}-${DP_ARCH}")
  endif()

  file( TO_CMAKE_PATH "$ENV{DP_3RDPARTY_PATH}" DP_3RDPARTY_PATH )
  set( NVPMAPI_INCLUDE_DIR "${DP_3RDPARTY_PATH}/NvPmApi/include" )
  set( NVPMAPI_BIN_DIR "${DP_3RDPARTY_PATH}/NvPmApi/bin/win-${DP_ARCH}" )
endif(WIN32)

if ( UNIX )
  message("ERROR NvPmAPI not yet built for Linux.")
  # set ( COMPILER "gcc-4.1-${DP_ARCH}" )
endif( UNIX )

MACRO( CopyNvPmApi target )
  if ("${CMAKE_GENERATOR}" MATCHES "^(Visual Studio).*")
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/Nvda.NvDebugApi.100.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(ConfigurationName)" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.Core.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(ConfigurationName)" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.DataProvider.Gpu.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(ConfigurationName)" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.DataProvider.Legacy.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/$(ConfigurationName)" )
  else()
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/Nvda.NvDebugApi.100.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.Core.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.DataProvider.Gpu.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
    copy_file_if_changed( ${target} "${NVPMAPI_BIN_DIR}/NvPmApi.DataProvider.Legacy.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
  endif()
ENDMACRO()

